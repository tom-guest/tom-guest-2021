<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tom Guest</title>
    <link>https://tomguest.netlify.com/</link>
      <atom:link href="https://tomguest.netlify.com/index.xml" rel="self" type="application/rss+xml" />
    <description>Tom Guest</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://tomguest.netlify.com/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Tom Guest</title>
      <link>https://tomguest.netlify.com/</link>
    </image>
    
    <item>
      <title>Python basics</title>
      <link>https://tomguest.netlify.com/courses/example/python/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/courses/example/python/</guid>
      <description>&lt;p&gt;Build a foundation in Python.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rfscVS0vtbw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the difference between lists and tuples?&lt;/summary&gt;
  &lt;p&gt;&lt;p&gt;Lists&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are mutable - they can be changed&lt;/li&gt;
&lt;li&gt;Slower than tuples&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_list = [1, 2.0, &#39;Hello world&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tuples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are immutable - they can&amp;rsquo;t be changed&lt;/li&gt;
&lt;li&gt;Tuples are faster than lists&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_tuple = (1, 2.0, &#39;Hello world&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Is Python case-sensitive?&lt;/summary&gt;
  &lt;p&gt;Yes&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>https://tomguest.netlify.com/courses/example/visualization/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/courses/example/visualization/</guid>
      <description>&lt;p&gt;Learn how to visualize data with Plotly.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hSPmj7mK6ng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;When is a heatmap useful?&lt;/summary&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Write Plotly code to render a bar chart&lt;/summary&gt;
  &lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
data_canada = px.data.gapminder().query(&amp;quot;country == &#39;Canada&#39;&amp;quot;)
fig = px.bar(data_canada, x=&#39;year&#39;, y=&#39;pop&#39;)
fig.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Statistics</title>
      <link>https://tomguest.netlify.com/courses/example/stats/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/courses/example/stats/</guid>
      <description>&lt;p&gt;Introduction to statistics for data science.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;
&lt;p&gt;The general form of the &lt;strong&gt;normal&lt;/strong&gt; probability density function is:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \frac{1}{\sigma \sqrt{2\pi} } e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}
$$&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The parameter $\mu$ is the mean or expectation of the distribution.
$\sigma$ is its standard deviation.
The variance of the distribution is $\sigma^{2}$.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the parameter $\mu$?&lt;/summary&gt;
  &lt;p&gt;The parameter $\mu$ is the mean or expectation of the distribution.&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Chromosome overview plots</title>
      <link>https://tomguest.netlify.com/tutorial/circleplot/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/circleplot/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use the &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/ggbio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggbio&lt;/a&gt; package to build overview plots.&lt;/p&gt;
&lt;p&gt;These are good for showing a simple representation of ChIP-seq and other datasets.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tomguest.netlify.com/tutorial/circle_files/example.png&#34; alt=&#34;Example of a simple overview plot. In this plot genes of the positive (red) and negative (blue) strands of a single bacterial chromosome are shown as rectangles on two tracks.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In the example above only two tracks are shown, which are a representation of the all the genes encoded on the chromosome. Inner tracks can then be added to represent over types of data that have been aligned to the genome, such as sequencing reads.&lt;/p&gt;
&lt;h2 id=&#34;required-packages-and-data&#34;&gt;Required packages and data&lt;/h2&gt;
&lt;p&gt;Install (if necessary) and then load the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tidyverse&lt;/li&gt;
&lt;li&gt;data.table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These packages are bioconductor packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ggbio&lt;/li&gt;
&lt;li&gt;AnnotationDbi&lt;/li&gt;
&lt;li&gt;GenomicRanges&lt;/li&gt;
&lt;li&gt;Biostrings&lt;/li&gt;
&lt;li&gt;GenomicFeatures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will also need to import annotation data for the chromosome(s) as a TxDB. You can use GFF to make a TxDB or download a TxDB that already exists for the organism.&lt;/p&gt;
&lt;h3 id=&#34;create-a-txdb-object&#34;&gt;Create a TxDB object&lt;/h3&gt;
&lt;p&gt;A TxDB object contains genome annotation information. It is very simple to make, once you have done you can save and reload it whenever you wish to use it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download a GFF or GTF annotation file (from NCBI)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(GenomicFeatures)
library(AnnotationDbi)
&amp;lt;genomeName&amp;gt;TxDB &amp;lt;- makeTxDbFromGFF(&amp;quot;annotation&amp;lt;genomeName&amp;gt;.gff&amp;quot;)
saveDb(&amp;lt;genomeName&amp;gt;TxDB, file=&amp;quot;&amp;lt;genomeName&amp;gt;TxDB.sqlite&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Loading the TxDB file (replacing &lt;genome&gt;, with a name for the genome you are using):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;genome&amp;gt;Annotation &amp;lt;- loadDb(&amp;quot;&amp;lt;genomeName&amp;gt;TxDB.sqlite&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-a-gene-track&#34;&gt;Creating a gene track&lt;/h2&gt;
&lt;p&gt;This track shows the genes on the positive and negative strand of the chromosome. To do this in a single track you need to collapse it, because there are often overlapping genes in different reading frames.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p_strand &amp;lt;- as_tibble(cds(&amp;lt;genome&amp;gt;Annotation, filter = list(tx_strand = &amp;quot;+&amp;quot;))) %&amp;gt;%
  dplyr::select(c(&#39;seqnames&#39;, &#39;start&#39;, &#39;end&#39;)) %&amp;gt;%
  arrange(start) %&amp;gt;%
  dplyr::group_by(g = cumsum(cummax(lag(end, default = first(end))) &amp;lt; start)) %&amp;gt;% 
  dplyr::summarise(start = first(start), end = max(end)) %&amp;gt;%
  dplyr::select(c(&#39;start&#39;, &#39;end&#39;))

p_strand$seqnames &amp;lt;- &amp;quot;NC_000000.0&amp;quot;

n_strand &amp;lt;- as_tibble(cds(chrIAnnotation, filter = list(tx_strand = &amp;quot;-&amp;quot;))) %&amp;gt;%
  dplyr::select(c(&#39;seqnames&#39;, &#39;start&#39;, &#39;end&#39;)) %&amp;gt;%
  dplyr::arrange(start) %&amp;gt;%
  dplyr::group_by(g = cumsum(cummax(lag(end, default = first(end))) &amp;lt; start)) %&amp;gt;% 
  dplyr::summarise(start = first(start), end = max(end)) %&amp;gt;%
  dplyr::select(c(&#39;start&#39;, &#39;end&#39;))

n_strand$seqnames &amp;lt;- &amp;quot;NC_000000.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, import the coding sequences from the annotation file and filter for the positive strand only.&lt;/p&gt;
&lt;p&gt;Then arrange data frame by the start position of each gene.&lt;/p&gt;
&lt;p&gt;The group_by and summarise functions are used to &amp;lsquo;collapse&amp;rsquo; the data, by using the start and end positions of genes to merge overlapping coding regions in the different reading frames.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lag(end)&lt;/code&gt; adds a column that tracks the previous end values, &lt;code&gt;cummax&lt;/code&gt; stores the highest of previous end values which is then compared with the end. When a start value is higher than the maximum of the previous stop, it creates a new group. &lt;code&gt;cumsum&lt;/code&gt; tracks the number of TRUEs and gives each different group (i.e.. overlapping genes form groups) a unique number. &lt;code&gt;summarise&lt;/code&gt; aggregates based on the group id using the first start value of each group and the largest end value.&lt;/p&gt;
&lt;p&gt;Finally need to add back in the &lt;code&gt;seqname&lt;/code&gt; column. This should be the RefSeq value from NCBI and should match up the chromosome name used in the reference genome. This is repeated for the negative strand.&lt;/p&gt;
&lt;p&gt;Next you create GRanges objects with the &lt;code&gt;p_strand&lt;/code&gt; and &lt;code&gt;n_strand&lt;/code&gt; information using the &lt;code&gt;makeGRangesFromDataFrame&lt;/code&gt; function from the &lt;code&gt;GenomicRanges&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pos_genes &amp;lt;- makeGRangesFromDataFrame(p_strand)
neg_genes &amp;lt;- makeGRangesFromDataFrame(n_strand)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-the-plot&#34;&gt;Creating the plot&lt;/h2&gt;
&lt;p&gt;The plot is created using the &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/ggbio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggbio&lt;/a&gt; package. It works similarly to ggplot, so you can add multiple elements by using &amp;lsquo;+&amp;rsquo; and various geoms (such as point, line, link, etc..) For the gene track we will use the rectangle (&lt;code&gt;rect&lt;/code&gt;) geom.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot &amp;lt;- ggbio(buffer = 0.2, radius = 10) +
  #circle(avg_reads_track, geom = &amp;quot;line&amp;quot;, trackWidth= 3,
  #      color = &amp;quot;dodgerblue2&amp;quot;, aes(y=average), buffer=35, radius=6, space.skip=0) +
  circle(neg_genes, geom = &amp;quot;rect&amp;quot;, color=NA, 
        fill=&#39;blue&#39;, trackWidth=0.5, space.skip=0) +
  circle(pos_genes, geom = &amp;quot;rect&amp;quot;, color=NA, 
         fill=&#39;red&#39;, trackWidth=0.5, space.skip=0) 
plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plot is initialised using a call to the &lt;code&gt;ggbio&lt;/code&gt; function. The two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buffer: the space between each track&lt;/li&gt;
&lt;li&gt;radius: the size of the circle plot (might need to increase this depending on the number of tracks you want to add)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;circle()&lt;/code&gt; function is called for creating a track in the plot, there a number of parameters that can be set to alter the aesthetics of the track. You can view the help file and all the parameters that can be altered by entering &lt;code&gt;?circle&lt;/code&gt; in the R console.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tomguest.netlify.com/tutorial/circle_files/circle_help.png&#34; alt=&#34;Help page for the ggbio circle layout function.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;space.skip&lt;/code&gt; parameter set to zero means that there is no space between the beginning and end of the chromosome. This is required because the default behaviour is designed to have space between multiple chromosomes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>De-novo motif finding</title>
      <link>https://tomguest.netlify.com/tutorial/motif/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/motif/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use MEME to find binding motifs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Peak calling</title>
      <link>https://tomguest.netlify.com/tutorial/peakcalling/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/peakcalling/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use MACS to call peaks.&lt;/p&gt;
&lt;h2 id=&#34;how-to-install-macs&#34;&gt;How-to install MACS&lt;/h2&gt;
&lt;p&gt;MACS2 runs in python (v2.7, not 3). You will need to download and install python and numpy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://www.python.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python 2.7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then download the &lt;code&gt;numpy.whl&lt;/code&gt; file &lt;a href=&#34;https://pypi.org/project/numpy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;numpy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the Terminal, navigate to the folder containing the &lt;code&gt;numpy.whl&lt;/code&gt; file and then install numpy by entering:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install numpy.whl&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the tarfile for &lt;a href=&#34;https://pypi.org/project/MACS2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MACS&lt;/a&gt;, extract it (by double-clicking on Mac)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the folder containing the extracted MACS files in Terminal and run:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;python setup.py install&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;macs2-parameters&#34;&gt;MACS2 parameters&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;: treatment file&lt;br&gt;
&lt;code&gt;-c&lt;/code&gt;: control file&lt;br&gt;
&lt;code&gt;--format&lt;/code&gt;: the input file format, e.g.. BAM&lt;br&gt;
&lt;code&gt;--gsize&lt;/code&gt;: the size of the genome (or chromosome)&lt;br&gt;
&lt;code&gt;--name&lt;/code&gt;: a name to append to the output files&lt;br&gt;
&lt;code&gt;--bw&lt;/code&gt;: &amp;lsquo;bandwidth&amp;rsquo; the average size of the DNA fragments (after sonication)&lt;/p&gt;
&lt;p&gt;You can find out more information about MACS2 parameters on the &lt;a href=&#34;https://github.com/taoliu/MACS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github page&lt;/a&gt;, or by typing &lt;code&gt;macs2&lt;/code&gt; into the Terminal command line.&lt;/p&gt;
&lt;h2 id=&#34;using-macs2-to-call-peaks&#34;&gt;Using MACS2 to call peaks&lt;/h2&gt;
&lt;p&gt;To run MACS you will need to navigate to the folder containing your BAM alignment files. Using the &lt;code&gt;cd&lt;/code&gt; command to change directory.&lt;/p&gt;
&lt;p&gt;From here you need to call &lt;code&gt;macs2 callpeak&lt;/code&gt; with the parameters you wish to use. If you have multiple replicates you can either call peaks with them both at the same time or separately. Peak calling works with and without a control sample.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macs2 callpeak -t treatment_rep1.bam treatment_rep2.bam -c control_rep1.bam control_rep2.bam --format BAM  --gsize &amp;lt;genome_size&amp;gt; --name &amp;quot;rep1andrep2&amp;quot;  --bw 400 --nomodel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this example macs 2 call peak function is called on two replicate treatment files BAM files, with 2 control files. The format is specified as &lt;code&gt;BAM&lt;/code&gt;, replace &lt;code&gt;&amp;lt;genome_size&amp;gt;&lt;/code&gt; with the size of the genome/chromosome, for example: &lt;code&gt;2961149&lt;/code&gt; for chromosome I of &lt;em&gt;V.cholerae&lt;/em&gt;. The bandwidth is set to 400 and have told macs not to use its model function.&lt;/p&gt;
&lt;p&gt;The function prints to the console as it is working and when it is complete you will see &lt;code&gt;Done!&lt;/code&gt;. It produces an excel sheet (which is actually a &lt;code&gt;.csv&lt;/code&gt; file), some &lt;code&gt;.BED&lt;/code&gt; files, &lt;code&gt;.narrowPEAK&lt;/code&gt; (which is tab-delimited list of peaks) and some logs.&lt;/p&gt;
&lt;p&gt;They all contain the same information, but the excel sheet is probably the most user-friendly. BED files can be opened in some genome browsers.&lt;/p&gt;
&lt;p&gt;I recommend moving the MACS output into a macs folder within your project structure, rather than keeping the output files with your alignments.&lt;/p&gt;
&lt;h2 id=&#34;using-peak-information-into-r&#34;&gt;Using peak information into R&lt;/h2&gt;
&lt;h3 id=&#34;why-import-peaks&#34;&gt;Why import peaks?&lt;/h3&gt;
&lt;p&gt;You can easily import all the information in the excel sheet into R. This can then be used for visualisation, finding the nearest genes, calculating the distance from peak centres to the nearest transcription start site etc..&lt;br&gt;
You can use R to calculate the centre of the peak (based on the start and end, recognised by MACS) or if you wish to use a genome browser to manually select peak centres you could do this by amending the data in Excel.&lt;/p&gt;
&lt;p&gt;This can then be used to extract the DNA sequence upstream/downstream of the peak centres in &lt;code&gt;.fasta&lt;/code&gt; format to perform de-novo motif finding with MEME.&lt;/p&gt;
&lt;h3 id=&#34;reading-peak-data-into-r&#34;&gt;Reading peak data into R&lt;/h3&gt;
&lt;p&gt;Since the &lt;code&gt;.xls&lt;/code&gt; file is actually a &lt;code&gt;.csv&lt;/code&gt; file in disguise it can be easily imported into R. The file also contains ~20 lines of information before the peak data, these lines start with a # so we can tell R to ignore those lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;peaks_dataFrame &amp;lt;- read.delim(&amp;quot;/macs/rep1andrep2.xls&amp;quot;,
  comment.char = &amp;quot;#&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;finding-genes-adjacent-to-peaks&#34;&gt;Finding genes adjacent to peaks&lt;/h3&gt;
&lt;p&gt;To find the genes that are adjacent to the peaks we will use the &lt;code&gt;ChIPseeker&lt;/code&gt; &lt;a href=&#34;https://www.bioconductor.org/packages/release/bioc/html/ChIPseeker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;package&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;install-chipseeker&#34;&gt;Install ChIPseeker&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;ChIPseeker&amp;quot;, version = &amp;quot;3.8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;create-a-txdb-object&#34;&gt;Create a TxDB object&lt;/h4&gt;
&lt;p&gt;A TxDB object contains genome annotation information that you will need to annotate peaks with genomic information. It is very simple to make, once you have done you can save and reload it whenever you wish to use it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download a GFF or GTF annotation file (from NCBI) and keep it in your &lt;code&gt;genomes&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(GenomicFeatures)
library(AnnotationDbi)
&amp;lt;genomeName&amp;gt;TxDB &amp;lt;- makeTxDbFromGFF(&amp;quot;genomes/annotation&amp;lt;genomeName&amp;gt;.gff&amp;quot;)
saveDb(&amp;lt;genomeName&amp;gt;TxDB, file=&amp;quot;genomes/&amp;lt;genomeName&amp;gt;TxDB.satellite&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Loading the TxDB file (replacing &lt;genome&gt;, with a name for the genome you are using):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;genome&amp;gt;Annotation &amp;lt;- loadDb(&amp;quot;genomes/&amp;lt;genomeName&amp;gt;TxDB.sqlite&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;annotate-peaks&#34;&gt;Annotate peaks&lt;/h4&gt;
&lt;p&gt;You will need to convert your data frame containing the peak data into a GRange object, this can easily be done with the &lt;code&gt;makeGRangesFromDataFrame()&lt;/code&gt; function from the GenomicRanges package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;peaks_gr &amp;lt;- makeGRangesFromDataFrame(peaks_dataFrame, keep.extra.columns=TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default the function removes any extra columns and only keeps chr, start and end. Setting the parameter &lt;code&gt;keep.extra.columns&lt;/code&gt; to TRUE will prevent this.&lt;/p&gt;
&lt;p&gt;Then you can use the &lt;code&gt;annotatePeak()&lt;/code&gt; function. You will need to direct it to your GRange and to a TxDb object that contains the genome annotation for the species you are working with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ChIPseeker)
annotatedPeaks &amp;lt;- annotatePeak(peaks_gr, TxDb = &amp;lt;genome&amp;gt;Annotation)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making a data frame with your annotated data makes it more useful, and you can export it as &lt;code&gt;.csv&lt;/code&gt; file to save and open later in R, Excel or in other software.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;annotatedPeaksDF &amp;lt;- as.data.frame(annotatedPeaks)
write.csv(annotatedPeaksDF, file = &amp;quot;annotation/rep1andrep2.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Bioconductor</title>
      <link>https://tomguest.netlify.com/tutorial/bioconductor_intro/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/bioconductor_intro/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this tutorial you will learn how to install and use bioconductor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bioconductor.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bioconductor&lt;/a&gt; is an opensource collection of R packages that provides a framework for doing bioinformatics in R.&lt;/p&gt;
&lt;p&gt;Install bioconductor with this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;BiocManager&amp;quot;))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards, installing bioconductor (BioC) packages is a little different from other R packages and makes use of the BiocManager::install() function. For example, to install QuasR:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BiocManager::install(&amp;quot;QuasR&amp;quot;, version = &amp;quot;3.8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bioconductor releases contain a number of R packages that have been designed to perform different tasks or provide the data structures required for interacting with genomic data.&lt;/p&gt;
&lt;h2 id=&#34;some-examples-of-bioc-packages&#34;&gt;Some examples of BioC packages&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Example packages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data structures&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;IRanges, GenomicRanges, Biostrings, BSgenome&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Input of data&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ShortRead&lt;/strong&gt;, Rsamtools, GenomicAlignments, &lt;strong&gt;rtracklayer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Annotation&lt;/td&gt;
&lt;td&gt;GenomicFeatures, &lt;strong&gt;BSgenome, TxDb&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alignment&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Rbowtie, QuasR&lt;/strong&gt;, Biostrings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ChIP-seq&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ChIPseeker&lt;/strong&gt;, chipseq, ChIPseqR, &lt;strong&gt;ChIPpeakAnno&lt;/strong&gt;, DiffBind, BayesPeak&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;De-novo motif discovery&lt;/td&gt;
&lt;td&gt;rGADEM, MotifDb, SeqLogo, &lt;strong&gt;ChIPpeakAnno&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RNA-seq&lt;/td&gt;
&lt;td&gt;EdgeR&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Packages in &lt;strong&gt;bold&lt;/strong&gt; are ones that are used later.&lt;/p&gt;
&lt;h1 id=&#34;creating-and-using-granges-objects&#34;&gt;Creating and using GRanges objects&lt;/h1&gt;
&lt;p&gt;One of the most useful data structures is GRanges. These are essentially a list of genomic intervals that could be anything from genes to transcription factor binding sites.&lt;/p&gt;
&lt;h2 id=&#34;creating-simple-granges&#34;&gt;Creating simple GRanges&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(GenomicRanges)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: stats4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: BiocGenerics
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &#39;BiocGenerics&#39; was built under R version 4.0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;BiocGenerics&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:parallel&#39;:
## 
##     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
##     clusterExport, clusterMap, parApply, parCapply, parLapply,
##     parLapplyLB, parRapply, parSapply, parSapplyLB
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     IQR, mad, sd, var, xtabs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     anyDuplicated, append, as.data.frame, basename, cbind, colnames,
##     dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
##     grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
##     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
##     rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
##     union, unique, unsplit, which.max, which.min
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: S4Vectors
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;S4Vectors&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:base&#39;:
## 
##     expand.grid
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: IRanges
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: GenomeInfoDb
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &#39;GenomeInfoDb&#39; was built under R version 4.0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start, here is a GRanges object which has 3 genes, all on chromosome 1. The first gene runs from position 1-3, and are 3 nucleotides long.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gr1 &amp;lt;- GRanges(seqnames = &amp;quot;chr1&amp;quot;, strand = c(&amp;quot;+&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;+&amp;quot;),
              ranges = IRanges(start = c(1,3,5), width = 3))
gr1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GRanges object with 3 ranges and 0 metadata columns:
##       seqnames    ranges strand
##          &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;
##   [1]     chr1       1-3      +
##   [2]     chr1       3-5      -
##   [3]     chr1       5-7      +
##   -------
##   seqinfo: 1 sequence from an unspecified genome; no seqlengths
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a GRange for a single chromosome.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chrI &amp;lt;- GRanges(seqnames = &amp;quot;chrI&amp;quot;,
              ranges = IRanges(start = 1, width = 3000000))
chrI
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GRanges object with 1 range and 0 metadata columns:
##       seqnames    ranges strand
##          &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;
##   [1]     chrI 1-3000000      *
##   -------
##   seqinfo: 1 sequence from an unspecified genome; no seqlengths
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a GRange with ChIP-seq peaks, all on the same chromosome you could assign the start and end co-ordinates to vectors and create a GRange from that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;peak_start &amp;lt;- c(100,220,450,767,899,1040)
peak_end &amp;lt;- c(140,260,490,800,945,1100)
peaks_gr &amp;lt;- GRanges(seqnames = &amp;quot;chrI&amp;quot;,
                    ranges = IRanges(start=peak_start, end=peak_end))
peaks_gr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GRanges object with 6 ranges and 0 metadata columns:
##       seqnames    ranges strand
##          &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;
##   [1]     chrI   100-140      *
##   [2]     chrI   220-260      *
##   [3]     chrI   450-490      *
##   [4]     chrI   767-800      *
##   [5]     chrI   899-945      *
##   [6]     chrI 1040-1100      *
##   -------
##   seqinfo: 1 sequence from an unspecified genome; no seqlengths
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;granges-from-dataframes&#34;&gt;GRanges from dataframes&lt;/h2&gt;
&lt;p&gt;It is more likely that you will want to create GRanges objects from other data structures. For example, if you import peaks from a BED file. Bioconductor packages provide import functions for different filetypes and then this can be coerced into a dataframe and easily converted into a GRanges object with the &lt;code&gt;makeGRangesFromDataFrame&lt;/code&gt; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aligning to a reference genome</title>
      <link>https://tomguest.netlify.com/tutorial/alignment/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/alignment/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use the &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/QuasR.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QuasR&lt;/a&gt; package to align our sequencing data to a reference genome.&lt;/p&gt;
&lt;p&gt;QuasR uses the alignment program &lt;code&gt;Bowtie&lt;/code&gt;, and will produce &lt;code&gt;bam&lt;/code&gt; files for each alignment. There are more advanced options for including auxiliary genomes (which are used to align &amp;lsquo;leftover&amp;rsquo; unmapped sequences) which are useful to check for contaminating DNA and for spiked experiments.&lt;/p&gt;
&lt;h3 id=&#34;sequencing-reads&#34;&gt;Sequencing reads&lt;/h3&gt;
&lt;p&gt;In ChIP-seq the sequencing reads are typically short single end dsDNA. This means that the 5’ end will be sequenced on “+” strand and the 3’ end will be on “-” strand. &amp;ldquo;+” reads extend only in positive direction and “-” reads in negative direction which results in the typical bimodal peak at transcription factor binding sites.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tomguest.netlify.com/tutorial/alignment_files/reads.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;install-the-quasr-package&#34;&gt;Install the QuasR package&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;QuasR&amp;quot;, version = &amp;quot;3.8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder structure&lt;/h2&gt;
&lt;p&gt;I recommend having a folder for each new project. Within this create separate folders for &lt;code&gt;raw_fastq&lt;/code&gt;, &lt;code&gt;alignments&lt;/code&gt;, &lt;code&gt;genomes&lt;/code&gt;, etc. You can then keep things tidy and avoid making any changes or accidentally deleting your raw fastq sequencing data.&lt;/p&gt;
&lt;p&gt;You should set the project root as working directory, (or even better create a RStudio project).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;setwd(&amp;quot;path/to/myChIPseqProject&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Download and save the genome &lt;code&gt;fasta&lt;/code&gt; file(s) to your genomes folder. Then direct R to their location(s).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chromosomeI &amp;lt;- &amp;quot;genomes/chromosome_I.fasta&amp;quot;
chromosomeII &amp;lt;- &amp;quot;genomes/chromosome_II.fasta&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need to create a tabulated &lt;code&gt;sampleFile.txt&lt;/code&gt; which should contain two columns &lt;code&gt;FileName&lt;/code&gt; and &lt;code&gt;SampleName&lt;/code&gt;, list the names of the files (exactly as they are) and a name for each sample.&lt;/p&gt;
&lt;p&gt;If you multiple replicates you can either name them as &lt;code&gt;replicate_**&lt;/code&gt; or if you give them all the same SampleName, R will know to treat them as replicates, but you will need to decide if that is how you want R to behave. If you are unsure stick with the former approach.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FileName&lt;/th&gt;
&lt;th&gt;SampleName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sample1.fastq&lt;/td&gt;
&lt;td&gt;sample1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sample2.fastq&lt;/td&gt;
&lt;td&gt;sample2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then assign this to &lt;code&gt;sampleFile&lt;/code&gt; in R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sampleFile &amp;lt;- &amp;quot;raw_fastq/sampleFile.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-the-alignments&#34;&gt;Making the alignment(s)&lt;/h2&gt;
&lt;p&gt;If you have multiple chromosomes you can assign the alignment to each as a separate QuasR project.&lt;/p&gt;
&lt;p&gt;Note:
You could choose to align using a BSgenome object instead, see the &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/vignettes/QuasR/inst/doc/QuasR.html#617_using_a_bsgenome_package_as_reference_genome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QuasR documentation&lt;/a&gt; if you prefer to do that.&lt;/p&gt;
&lt;p&gt;Before you run the &lt;code&gt;qAlign()&lt;/code&gt; function, make sure that you have created the folders to store your alignments (or you will get an error saying the directory does not exist).&lt;/p&gt;
&lt;p&gt;To see a full list of other alignment parameters, use &lt;code&gt;?qAlign&lt;/code&gt; to see the helpfile.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;proj_chrI &amp;lt;- qAlign(sampleFile, genome=chromosomeI, projectName = &amp;quot;chrI&amp;quot;, alignmentsDir= &amp;quot;alignments/chrI/&amp;quot;)
proj_chrII &amp;lt;- qAlign(sampleFile, genome=chromosomeII, projectName = &amp;quot;chrII&amp;quot;, alignmentsDir= &amp;quot;alignments/chrII/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the same code again and you already have the output &lt;code&gt;.bam&lt;/code&gt; and &lt;code&gt;.txt&lt;/code&gt; files it will not repeat the alignment. If you alter any alignment parameters it will do a new alignment.&lt;/p&gt;
&lt;p&gt;You can type the project name into the console to see which output files correspond to each alignment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;proj_chrI
proj_chrII
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;auxiliary-alignments&#34;&gt;Auxiliary alignments&lt;/h3&gt;
&lt;p&gt;You can specify auxiliary genomes to be used to align unmapped sequences from the core genome. For example, if you have a spiked experiment or to check for contaminating sequences.&lt;/p&gt;
&lt;p&gt;To do this supply a text file with a list of additional genome files like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FileName&lt;/th&gt;
&lt;th&gt;AuxName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NC_001422.1.fa&lt;/td&gt;
&lt;td&gt;phiX174&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then assign it in R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;additionalGenomes &amp;lt;- &amp;quot;genomes/additionalGenomes.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then when running qAlign, add &lt;code&gt;auxiliaryFile = additionalGenomes&lt;/code&gt; to the arguments list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;proj_chrI &amp;lt;- qAlign(sampleFile, genome=chromosomeI, projectName = &amp;quot;chrI&amp;quot;, alignmentsDir= &amp;quot;alignments/chrI/&amp;quot;,
                    auxiliaryFile = additionalGenomes)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;alignment-stats-and-quality-reports&#34;&gt;Alignment stats and quality reports&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;alignmentStats()&lt;/code&gt; function to find out the number of mapped/unmapped reads.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alignmentStats(proj_chrI)
alignmentStats(proj_chrII)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can produce PDF quality reports for each alignment using the &lt;code&gt;qQCReport()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;qQCReport(proj_chrI, pdfFilename = &amp;quot;quality_reports/chrI_quality.pdf&amp;quot;)
qQCReport(proj_chrII, pdfFilename = &amp;quot;quality_reports/chrII_quality.pdf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Normalising read counts</title>
      <link>https://tomguest.netlify.com/tutorial/normalisation/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/normalisation/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use the normalise read counts.&lt;/p&gt;
&lt;p&gt;To do this you will need to import the BAM files from your alignments and use the mapping statistics and the average read length from the sequencing run.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>https://tomguest.netlify.com/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Forging a BSgenome package</title>
      <link>https://tomguest.netlify.com/tutorial/bsgenome/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/tutorial/bsgenome/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we will use the BSgenome package to create an R package that contains the genome for &lt;em&gt;Vibrio cholerae&lt;/em&gt;, but you can replace it with &lt;strong&gt;your favourite organism&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/BSgenome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BSgenome&lt;/a&gt; package provides a framework for interacting with genome information in R.&lt;/p&gt;
&lt;p&gt;Alert:
There may already be a BSgenome package for your favourite organism. Check the &lt;a href=&#34;https://kasperdanielhansen.github.io/genbioconductor/html/BSgenome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;list&lt;/a&gt; of available genomes first.&lt;/p&gt;
&lt;p&gt;Once you have &lt;em&gt;forged&lt;/em&gt; (created) and installed the package, you will be able to load the genome as you would any other R package, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(BSgenome.Vcholerae.NCBI.N16961)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;em&gt;V. cholerae&lt;/em&gt; happens to be &lt;strong&gt;your favourite organism&lt;/strong&gt; too, and want to save yourself some time, you can &lt;a href=&#34;https://tomguest.netlify.com/tutorial/files/BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz&#34;&gt;download&lt;/a&gt; the package I created, and skip to the &amp;lsquo;Install your genome package&amp;rsquo; section to get started.&lt;/p&gt;
&lt;h2 id=&#34;install-the-bsgenome-package&#34;&gt;Install the BSgenome package&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;BSgenome&amp;quot;, version = &amp;quot;3.8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;download-the-genome-sequence&#34;&gt;Download the genome sequence&lt;/h2&gt;
&lt;p&gt;You will need to download the fasta files for the genome you want to forge. Since &lt;em&gt;V. cholerae&lt;/em&gt; has two chromosomes, these are downloaded separately. You can use whatever source you like (EMBO, NCBI etc..) but make sure you get it in &lt;strong&gt;fasta&lt;/strong&gt; file type.&lt;/p&gt;
&lt;p&gt;For the &lt;em&gt;V.cholerae&lt;/em&gt; reference genome (N16961):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/nuccore/NC_002505.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chromosome I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/nuccore/NC_002506.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chromesome II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the NCBI website, click send to file, then select FASTA.&lt;/p&gt;
&lt;h2 id=&#34;prepare-your-files&#34;&gt;Prepare your files&lt;/h2&gt;
&lt;p&gt;I created a new folder on my Desktop and set this as my working directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;setwd(&amp;quot;~/Desktop/genomepackage&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within this create another named &lt;code&gt;seqs_srcdir&lt;/code&gt;, move the fasta files here.&lt;/p&gt;
&lt;p&gt;Make sure the files are appropriately named (i.e.. as-is from source) for &lt;em&gt;V. cholerae&lt;/em&gt; the two chromosome fasta files are named: &lt;code&gt;NC_002505.1.fa&lt;/code&gt; and  &lt;code&gt;NC_002506.1.fa&lt;/code&gt;. It is tempting to name them something more readable like &amp;ldquo;chromosome 1&amp;rdquo; but this can cause problems later.&lt;/p&gt;
&lt;p&gt;Ensure the file extensions are &lt;code&gt;.fa&lt;/code&gt; if they are not already, on Mac double check by right-clicking and choosing &amp;lsquo;Get Info&amp;rsquo; because it could still be &lt;code&gt;.fasta&lt;/code&gt; - if so, amend it.&lt;/p&gt;
&lt;h3 id=&#34;seed-file&#34;&gt;Seed file&lt;/h3&gt;
&lt;p&gt;The seed file contains all the relevant metadata for the BSgenome package, so it is worth supplying as much information as you can. The easiest way to make a seed file is to edit one that already exists, so you can download my &lt;a href=&#34;https://tomguest.netlify.com/tutorial/files/BSgenome.Vcholerae.NCBI.N16961-seed&#34;&gt;seed file&lt;/a&gt; and use it as a template.&lt;/p&gt;
&lt;p&gt;You will need to use a text editor such as TextEdit on Mac (right-click and select open with &amp;gt; TextEdit) or RStudio. Use NCBI to populate the relevant information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package: BSgenome.Vcholerae.NCBI.N16961&lt;br&gt;
Title: Full genome sequence for Vibrio cholerae O1 biovar El Tor str N16961&lt;br&gt;
Description: Full genome sequence for the two chromosomes of Vibrio cholerae El Tor N16961 provided by NCBI&lt;br&gt;
Version: 1.0.0&lt;br&gt;
organism: Vibrio cholerae&lt;br&gt;
common_name: V. cholerae&lt;br&gt;
provider: NCBI&lt;br&gt;
provider_version: ASM674v1&lt;br&gt;
release_date: 2014/02&lt;br&gt;
release_name: N16961&lt;br&gt;
source_url: &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/genome/?term=Vibrio%20cholerae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ncbi.nlm.nih.gov/genome/?term=Vibrio%20cholerae&lt;/a&gt;&lt;br&gt;
organism_biocview: Vibrio_cholerae&lt;br&gt;
BSgenomeObjname: Vcholerae&lt;br&gt;
seqnames: c(&amp;ldquo;NC_002505.1&amp;rdquo;,&amp;ldquo;NC_002506.1&amp;rdquo;)&lt;br&gt;
seqs_srcdir: /User/Desktop/genomepackage/seqs_srcdir&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For genomes with multiple chromosomes, list them as a vector (see above example). Otherwise &lt;code&gt;seqnames: chromosomenameFileName&lt;/code&gt; is sufficient (you can remove the c()).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;BSgenomeObjname&lt;/code&gt; is important because this is the name you will use to access the package in R once it has been installed.&lt;/p&gt;
&lt;p&gt;Save it as is, and then edit the file name. Be careful with the file extensions, double check using &amp;lsquo;Get Info&amp;rsquo; to ensure it has not been changed to &lt;code&gt;.txt&lt;/code&gt; or anything else.&lt;/p&gt;
&lt;h2 id=&#34;forge-the-package&#34;&gt;Forge the package&lt;/h2&gt;
&lt;p&gt;The package is forged using the &lt;code&gt;forgeBSgenomeDataPkg&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Simply use the name of the seed file as the only argument and it will create your package files to the same directory.&lt;/p&gt;
&lt;p&gt;Alert:&lt;br&gt;
Double check the sequence files are &lt;code&gt;.fa&lt;/code&gt; file types and that the details in the seed are correct before running.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;forgeBSgenomeDataPkg(&amp;quot;BSgenome.Vcholerae.NCBI.N16961-seed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to run the function again, delete the previous package files first.&lt;/p&gt;
&lt;h2 id=&#34;install-your-genome-package&#34;&gt;Install your genome package&lt;/h2&gt;
&lt;p&gt;To install the genome package you will need to use the Mac command line (Terminal).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Close R&lt;/li&gt;
&lt;li&gt;Open Terminal&lt;/li&gt;
&lt;li&gt;In Terminal navigate to your working directory:
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;ls&lt;/code&gt; to see list of files in the current directory&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;cd&lt;/code&gt; to move to a directory (i.e.. &lt;code&gt;cd Desktop&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;R CMD build BSgenome.Vcholerae.EBI.N16961&lt;/code&gt; to compile the package&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;R CMD check BSgenome.Vcholerae.EBI.N16961.tar.gz&lt;/code&gt; to check it&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;R CMD INSTALL BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alert:&lt;br&gt;
If you have downloaded my &lt;em&gt;V. cholerae N16961&lt;/em&gt; &lt;a href=&#34;https://tomguest.netlify.com/tutorial/files/BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz&#34;&gt;package&lt;/a&gt; you will need to navigate to wherever you have saved the file.  Then run:&lt;br&gt;
&lt;code&gt;R CMD INSTALL BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And you&amp;rsquo;re done! It should now be ready to use.&lt;/p&gt;
&lt;h2 id=&#34;loading-and-accessing-the-genome-in-r&#34;&gt;Loading and accessing the genome in R&lt;/h2&gt;
&lt;p&gt;To use the genome in R you will need to load the package using the &lt;code&gt;library()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(BSgenome.Vcholerae.NCBI.N16961)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enter the &lt;code&gt;BSgenomeObjname&lt;/code&gt; (in this case Vcholerae) to print some general information about the genome to the console.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Vcholerae
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## V. cholerae genome:
## # organism: Vibrio cholerae (V. cholerae)
## # genome: ASM674v1
## # provider: NCBI
## # release date: 2014/02
## # 2 sequences:
## #   NC_002505.1 NC_002506.1                                                
## # (use &#39;seqnames()&#39; to see all the sequence names, use the &#39;$&#39; or &#39;[[&#39; operator
## # to access a given sequence)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;length()&lt;/code&gt; tells you how many chromosomes there are&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(Vcholerae)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Vcholerae$NC_002505.1&lt;/code&gt; tells you the length of chromosome I and a bit of its sequence&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Vcholerae$NC_002505.1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2961149-letter DNAString object
## seq: AGGGTCATTAAATATATATAAAGATCTATATAGAGA...GGCTAGAAAATCGCTTTCCTGTTTTTTCGATCAAGG
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;alphabetFrequency(Vcholerae$NC_002505.1)&lt;/code&gt; shows you the ACGT content of chromosome I&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alphabetFrequency(Vcholerae$NC_002505.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      A      C      G      T      M      R      W      S      Y      K      V 
## 769234 703384 708931 779567      0      0      0      0      0      0      0 
##      H      D      B      N      -      +      . 
##      0      0      0     33      0      0      0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can extract sequence from specific co-ordinates, for example to select the sequence from position 45 to 65 on chromosome I:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Vcholerae$NC_002505.1[45:65]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 21-letter DNAString object
## seq: TTAGATCTACTATTAAGGAGC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could then store this in a data frame, export the data frame as fasta file (with multiple sequence etc..) and use it somewhere else&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://tomguest.netlify.com/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://tomguest.netlify.com/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://tomguest.netlify.com/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://tomguest.netlify.com/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomguest.netlify.com/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/admin/config.yml</guid>
      <description></description>
    </item>
    
    <item>
      <title>Online R Resources</title>
      <link>https://tomguest.netlify.com/internet-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tomguest.netlify.com/internet-resources/</guid>
      <description>&lt;h1 id=&#34;general&#34;&gt;General&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/daattali/addinslist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Studio Add-ins list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deanattali.com/tutorials/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shiny tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://andreacirilloblog.wordpress.com/2015/10/22/updater-package-update-r-version-with-a-function-on-mac-osx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;updateR&lt;/a&gt;
Package for updating R within R studio (website includes install and usage instructions).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactome.org/icon-lib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Icons for diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/acolumbus/how-to-use-r-with-excel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Migrating from Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://socviz.co&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data viz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;learning-r&#34;&gt;Learning R&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swirlstats.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Swirl&lt;/a&gt;
Learn basic R within R.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rockefelleruniversity.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rockefeller University&lt;/a&gt;
Lots of stuff for learning to use R for bioninformatics, ChIPseq, RNAseq etc..&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bioconductor.org/packages/release/bioc/vignettes/universalmotif/inst/doc/IntroductionToSequenceMotifs.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sequence motifs&lt;/a&gt;
good introduction to DNA sequence motifs&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;plotting&#34;&gt;Plotting&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ggplot2-exts.org/gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AliciaSchep/gglabeller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gglabeller&lt;/a&gt;
Shiny app for easily adding labels to ggplots. You can click on individual points or select multiple at once.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/calligross/ggthemeassist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggThemeAssist&lt;/a&gt;
Add-in for R Studio that allows you to alter graphical parameters of a ggplot within a nicer GUI and outputs the R code for producing the plot.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/ggedit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggedit&lt;/a&gt;
Shiny app for building ggplots, looks more powerful than theme assist.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/ComplexHeatmap-reference/book/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;heatmaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidgohel/rvg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rvg&lt;/a&gt;
Package for exporting plots into powerpoint for final aesthetic edits&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;writing&#34;&gt;Writing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ThinkR-open/remedy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;remedy&lt;/a&gt;
Keyboard shortcuts for RStudio that help you to write more efficiently. Such as Cmd-Ctrl+B for bold fontface.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/crsh/citr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;citr&lt;/a&gt;
R Studio add-in that allows you to cite within text written in R. It uses a bibliography file referenced in the document YAML, or can work directly with Zotero library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zotero.org/styles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zotero style library&lt;/a&gt;
Use to download csl files for citation styles in Rmarkdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/LudvigOlsen/insertImage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;insertimage&lt;/a&gt;
R Studio add-in to streamline adding images to markdown documents. Note: the copying files behaviour.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zevross.com/blog/2017/06/19/tips-and-tricks-for-working-with-images-and-figures-in-r-markdown-documents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tips for images in R markdown&lt;/a&gt;
Helpful post about managing images in R markdown documents and editing size etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hughjonesd.github.io/huxtable/huxtable.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;formatting tables using huxtable&lt;/a&gt;
Package that allows you to easily make nice tables using R dataframes in rmarkdown output&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://texfaq.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;latex faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;bio&#34;&gt;Bio&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wilkox/gggenes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gg genes&lt;/a&gt;
ggplot extension for making gene figures.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
