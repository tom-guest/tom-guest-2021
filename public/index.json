[{"authors":null,"categories":null,"content":"I am currently a postdoctoral researcher in Felipe Cava\u0026rsquo;s lab at the Department of Molecular Biology, Umeå University, Sweden.\nI did my PhD at the University of Birmingham in the Grainger Lab studying gene transcription in the bacterial pathogen Vibrio cholerae.\nI graduated from Heriot-Watt University, Edinburgh in 2016 with a BSc in Biological Sciences.\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://tomguest.netlify.com/author/tom-guest/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tom-guest/","section":"authors","summary":"I am currently a postdoctoral researcher in Felipe Cava\u0026rsquo;s lab at the Department of Molecular Biology, Umeå University, Sweden.\nI did my PhD at the University of Birmingham in the Grainger Lab studying gene transcription in the bacterial pathogen Vibrio cholerae.","tags":null,"title":"Tom Guest","type":"authors"},{"authors":null,"categories":null,"content":"This tutorial aims to help analyse data from ChIP-seq experiments in bacteria that investigate the binding of transcription factors.\nThe tutorial will cover:\nIntroduction to Bioconductor\n Installing Bioconductor and bioconductor packages Accessing and creating genome packages Interacting with genome data  Aligning to a reference genome\n Aligning fastq files to your reference genome Checking alignment stats and quality  Normalising read counts\nPeak calling \n Calling peaks using MACS Exporting and visualising peak data  De-novo motif discovery\n Finding transcription factor motifs from called peaks  Visualisation\n Overview plots Distance from TSS Functional analysis Coverage plots  About This was built in R markdown which is an easy-to-use, human readable markdown language. It is particularly useful because you can include R code whenever you like and throughout you will see sections of code so that you can a) see what code has been run and b) copy and use it yourself.\nI decided to bring together the tools that I have used to analyse ChIP-seq data because there is an abundance of information online for ChIP-seq analysis of eukaryotes, but not prokaryotes.\n","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"https://tomguest.netlify.com/tutorial/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/tutorial/","section":"tutorial","summary":"Some guidance for using R to do ChIP-seq analysis.","tags":null,"title":"ChIP-seq Analysis using R","type":"book"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Tom Guest FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://tomguest.netlify.com/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"https://tomguest.netlify.com/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"https://tomguest.netlify.com/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"https://tomguest.netlify.com/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use the ggbio package to build overview plots.\nThese are good for showing a simple representation of ChIP-seq and other datasets.\n   In the example above only two tracks are shown, which are a representation of the all the genes encoded on the chromosome. Inner tracks can then be added to represent over types of data that have been aligned to the genome, such as sequencing reads.\nRequired packages and data Install (if necessary) and then load the following packages:\n tidyverse data.table  These packages are bioconductor packages:\n ggbio AnnotationDbi GenomicRanges Biostrings GenomicFeatures  You will also need to import annotation data for the chromosome(s) as a TxDB. You can use GFF to make a TxDB or download a TxDB that already exists for the organism.\nCreate a TxDB object A TxDB object contains genome annotation information. It is very simple to make, once you have done you can save and reload it whenever you wish to use it.\n Download a GFF or GTF annotation file (from NCBI)  library(GenomicFeatures) library(AnnotationDbi) \u0026lt;genomeName\u0026gt;TxDB \u0026lt;- makeTxDbFromGFF(\u0026quot;annotation\u0026lt;genomeName\u0026gt;.gff\u0026quot;) saveDb(\u0026lt;genomeName\u0026gt;TxDB, file=\u0026quot;\u0026lt;genomeName\u0026gt;TxDB.sqlite\u0026quot;)   Loading the TxDB file (replacing , with a name for the genome you are using):  \u0026lt;genome\u0026gt;Annotation \u0026lt;- loadDb(\u0026quot;\u0026lt;genomeName\u0026gt;TxDB.sqlite\u0026quot;)  Creating a gene track This track shows the genes on the positive and negative strand of the chromosome. To do this in a single track you need to collapse it, because there are often overlapping genes in different reading frames.\np_strand \u0026lt;- as_tibble(cds(\u0026lt;genome\u0026gt;Annotation, filter = list(tx_strand = \u0026quot;+\u0026quot;))) %\u0026gt;% dplyr::select(c('seqnames', 'start', 'end')) %\u0026gt;% arrange(start) %\u0026gt;% dplyr::group_by(g = cumsum(cummax(lag(end, default = first(end))) \u0026lt; start)) %\u0026gt;% dplyr::summarise(start = first(start), end = max(end)) %\u0026gt;% dplyr::select(c('start', 'end')) p_strand$seqnames \u0026lt;- \u0026quot;NC_000000.0\u0026quot; n_strand \u0026lt;- as_tibble(cds(chrIAnnotation, filter = list(tx_strand = \u0026quot;-\u0026quot;))) %\u0026gt;% dplyr::select(c('seqnames', 'start', 'end')) %\u0026gt;% dplyr::arrange(start) %\u0026gt;% dplyr::group_by(g = cumsum(cummax(lag(end, default = first(end))) \u0026lt; start)) %\u0026gt;% dplyr::summarise(start = first(start), end = max(end)) %\u0026gt;% dplyr::select(c('start', 'end')) n_strand$seqnames \u0026lt;- \u0026quot;NC_000000.0\u0026quot;  First, import the coding sequences from the annotation file and filter for the positive strand only.\nThen arrange data frame by the start position of each gene.\nThe group_by and summarise functions are used to \u0026lsquo;collapse\u0026rsquo; the data, by using the start and end positions of genes to merge overlapping coding regions in the different reading frames.\nlag(end) adds a column that tracks the previous end values, cummax stores the highest of previous end values which is then compared with the end. When a start value is higher than the maximum of the previous stop, it creates a new group. cumsum tracks the number of TRUEs and gives each different group (i.e.. overlapping genes form groups) a unique number. summarise aggregates based on the group id using the first start value of each group and the largest end value.\nFinally need to add back in the seqname column. This should be the RefSeq value from NCBI and should match up the chromosome name used in the reference genome. This is repeated for the negative strand.\nNext you create GRanges objects with the p_strand and n_strand information using the makeGRangesFromDataFrame function from the GenomicRanges package.\npos_genes \u0026lt;- makeGRangesFromDataFrame(p_strand) neg_genes \u0026lt;- makeGRangesFromDataFrame(n_strand)  Creating the plot The plot is created using the ggbio package. It works similarly to ggplot, so you can add multiple elements by using \u0026lsquo;+\u0026rsquo; and various geoms (such as point, line, link, etc..) For the gene track we will use the rectangle (rect) geom.\nplot \u0026lt;- ggbio(buffer = 0.2, radius = 10) + #circle(avg_reads_track, geom = \u0026quot;line\u0026quot;, trackWidth= 3, # color = \u0026quot;dodgerblue2\u0026quot;, aes(y=average), buffer=35, radius=6, space.skip=0) + circle(neg_genes, geom = \u0026quot;rect\u0026quot;, color=NA, fill='blue', trackWidth=0.5, space.skip=0) + circle(pos_genes, geom = \u0026quot;rect\u0026quot;, color=NA, fill='red', trackWidth=0.5, space.skip=0) plot  The plot is initialised using a call to the ggbio function. The two parameters:\n buffer: the space between each track radius: the size of the circle plot (might need to increase this depending on the number of tracks you want to add)  The circle() function is called for creating a track in the plot, there a number of parameters that can be set to alter the aesthetics of the track. You can view the help file and all the parameters that can be altered by entering ?circle in the R console.\n   The space.skip parameter set to zero means that there is no space between the beginning and end of the chromosome. This is required because the default behaviour is designed to have space between multiple chromosomes.\n","date":1580083200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580083200,"objectID":"e382fe38b370103b3555d4901e8e00ea","permalink":"https://tomguest.netlify.com/tutorial/circleplot/","publishdate":"2020-01-27T00:00:00Z","relpermalink":"/tutorial/circleplot/","section":"tutorial","summary":"Introduction In this tutorial we will use the ggbio package to build overview plots.\nThese are good for showing a simple representation of ChIP-seq and other datasets.\n   In the example above only two tracks are shown, which are a representation of the all the genes encoded on the chromosome.","tags":null,"title":"Chromosome overview plots","type":"docs"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use MEME to find binding motifs.\n","date":1562198400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562198400,"objectID":"8f9c517e779ce31c3168233bc5915f19","permalink":"https://tomguest.netlify.com/tutorial/motif/","publishdate":"2019-07-04T00:00:00Z","relpermalink":"/tutorial/motif/","section":"tutorial","summary":"Introduction In this tutorial we will use MEME to find binding motifs.","tags":null,"title":"De-novo motif finding","type":"docs"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use MACS to call peaks.\nHow-to install MACS MACS2 runs in python (v2.7, not 3). You will need to download and install python and numpy.\n  Download Python 2.7\n  Then download the numpy.whl file numpy\n  Using the Terminal, navigate to the folder containing the numpy.whl file and then install numpy by entering:\npip install numpy.whl\n  Download the tarfile for MACS, extract it (by double-clicking on Mac)\n  Navigate to the folder containing the extracted MACS files in Terminal and run:\n  python setup.py install\nMACS2 parameters -t: treatment file\n-c: control file\n--format: the input file format, e.g.. BAM\n--gsize: the size of the genome (or chromosome)\n--name: a name to append to the output files\n--bw: \u0026lsquo;bandwidth\u0026rsquo; the average size of the DNA fragments (after sonication)\nYou can find out more information about MACS2 parameters on the Github page, or by typing macs2 into the Terminal command line.\nUsing MACS2 to call peaks To run MACS you will need to navigate to the folder containing your BAM alignment files. Using the cd command to change directory.\nFrom here you need to call macs2 callpeak with the parameters you wish to use. If you have multiple replicates you can either call peaks with them both at the same time or separately. Peak calling works with and without a control sample.\nmacs2 callpeak -t treatment_rep1.bam treatment_rep2.bam -c control_rep1.bam control_rep2.bam --format BAM --gsize \u0026lt;genome_size\u0026gt; --name \u0026quot;rep1andrep2\u0026quot; --bw 400 --nomodel\nIn this example macs 2 call peak function is called on two replicate treatment files BAM files, with 2 control files. The format is specified as BAM, replace \u0026lt;genome_size\u0026gt; with the size of the genome/chromosome, for example: 2961149 for chromosome I of V.cholerae. The bandwidth is set to 400 and have told macs not to use its model function.\nThe function prints to the console as it is working and when it is complete you will see Done!. It produces an excel sheet (which is actually a .csv file), some .BED files, .narrowPEAK (which is tab-delimited list of peaks) and some logs.\nThey all contain the same information, but the excel sheet is probably the most user-friendly. BED files can be opened in some genome browsers.\nI recommend moving the MACS output into a macs folder within your project structure, rather than keeping the output files with your alignments.\nUsing peak information into R Why import peaks? You can easily import all the information in the excel sheet into R. This can then be used for visualisation, finding the nearest genes, calculating the distance from peak centres to the nearest transcription start site etc..\nYou can use R to calculate the centre of the peak (based on the start and end, recognised by MACS) or if you wish to use a genome browser to manually select peak centres you could do this by amending the data in Excel.\nThis can then be used to extract the DNA sequence upstream/downstream of the peak centres in .fasta format to perform de-novo motif finding with MEME.\nReading peak data into R Since the .xls file is actually a .csv file in disguise it can be easily imported into R. The file also contains ~20 lines of information before the peak data, these lines start with a # so we can tell R to ignore those lines.\npeaks_dataFrame \u0026lt;- read.delim(\u0026quot;/macs/rep1andrep2.xls\u0026quot;, comment.char = \u0026quot;#\u0026quot;)  Finding genes adjacent to peaks To find the genes that are adjacent to the peaks we will use the ChIPseeker package.\nInstall ChIPseeker if (!requireNamespace(\u0026quot;BiocManager\u0026quot;, quietly = TRUE)) install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(\u0026quot;ChIPseeker\u0026quot;, version = \u0026quot;3.8\u0026quot;)  Create a TxDB object A TxDB object contains genome annotation information that you will need to annotate peaks with genomic information. It is very simple to make, once you have done you can save and reload it whenever you wish to use it.\n Download a GFF or GTF annotation file (from NCBI) and keep it in your genomes folder.  library(GenomicFeatures) library(AnnotationDbi) \u0026lt;genomeName\u0026gt;TxDB \u0026lt;- makeTxDbFromGFF(\u0026quot;genomes/annotation\u0026lt;genomeName\u0026gt;.gff\u0026quot;) saveDb(\u0026lt;genomeName\u0026gt;TxDB, file=\u0026quot;genomes/\u0026lt;genomeName\u0026gt;TxDB.satellite\u0026quot;)   Loading the TxDB file (replacing , with a name for the genome you are using):  \u0026lt;genome\u0026gt;Annotation \u0026lt;- loadDb(\u0026quot;genomes/\u0026lt;genomeName\u0026gt;TxDB.sqlite\u0026quot;)  Annotate peaks You will need to convert your data frame containing the peak data into a GRange object, this can easily be done with the makeGRangesFromDataFrame() function from the GenomicRanges package.\npeaks_gr \u0026lt;- makeGRangesFromDataFrame(peaks_dataFrame, keep.extra.columns=TRUE)  By default the function removes any extra columns and only keeps chr, start and end. Setting the parameter keep.extra.columns to TRUE will prevent this.\nThen you can use the annotatePeak() function. You will need to direct it to your GRange and to a TxDb object that contains the genome annotation for the species you are working with.\nlibrary(ChIPseeker) annotatedPeaks \u0026lt;- annotatePeak(peaks_gr, TxDb = \u0026lt;genome\u0026gt;Annotation)  Making a data frame with your annotated data makes it more useful, and you can export it as .csv file to save and open later in R, Excel or in other software.\nannotatedPeaksDF \u0026lt;- as.data.frame(annotatedPeaks) write.csv(annotatedPeaksDF, file = \u0026quot;annotation/rep1andrep2.csv\u0026quot;)  ","date":1562198400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562198400,"objectID":"67b487c7937174cd63f32a2a322c8da5","permalink":"https://tomguest.netlify.com/tutorial/peakcalling/","publishdate":"2019-07-04T00:00:00Z","relpermalink":"/tutorial/peakcalling/","section":"tutorial","summary":"Introduction In this tutorial we will use MACS to call peaks.\nHow-to install MACS MACS2 runs in python (v2.7, not 3). You will need to download and install python and numpy.","tags":null,"title":"Peak calling","type":"docs"},{"authors":null,"categories":null,"content":"Introduction In this tutorial you will learn how to install and use bioconductor.\nBioconductor is an opensource collection of R packages that provides a framework for doing bioinformatics in R.\nInstall bioconductor with this:\nif (!requireNamespace(\u0026quot;BiocManager\u0026quot;)) install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install()  Afterwards, installing bioconductor (BioC) packages is a little different from other R packages and makes use of the BiocManager::install() function. For example, to install QuasR:\nBiocManager::install(\u0026quot;QuasR\u0026quot;, version = \u0026quot;3.8\u0026quot;)  Bioconductor releases contain a number of R packages that have been designed to perform different tasks or provide the data structures required for interacting with genomic data.\nSome examples of BioC packages    Function Example packages     Data structures IRanges, GenomicRanges, Biostrings, BSgenome   Input of data ShortRead, Rsamtools, GenomicAlignments, rtracklayer   Annotation GenomicFeatures, BSgenome, TxDb   Alignment Rbowtie, QuasR, Biostrings   ChIP-seq ChIPseeker, chipseq, ChIPseqR, ChIPpeakAnno, DiffBind, BayesPeak   De-novo motif discovery rGADEM, MotifDb, SeqLogo, ChIPpeakAnno   RNA-seq EdgeR    Packages in bold are ones that are used later.\nCreating and using GRanges objects One of the most useful data structures is GRanges. These are essentially a list of genomic intervals that could be anything from genes to transcription factor binding sites.\nCreating simple GRanges library(GenomicRanges)  ## Loading required package: stats4  ## Loading required package: BiocGenerics  ## Warning: package 'BiocGenerics' was built under R version 4.0.5  ## Loading required package: parallel  ## ## Attaching package: 'BiocGenerics'  ## The following objects are masked from 'package:parallel': ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB  ## The following objects are masked from 'package:stats': ## ## IQR, mad, sd, var, xtabs  ## The following objects are masked from 'package:base': ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min  ## Loading required package: S4Vectors  ## ## Attaching package: 'S4Vectors'  ## The following object is masked from 'package:base': ## ## expand.grid  ## Loading required package: IRanges  ## Loading required package: GenomeInfoDb  ## Warning: package 'GenomeInfoDb' was built under R version 4.0.5  To start, here is a GRanges object which has 3 genes, all on chromosome 1. The first gene runs from position 1-3, and are 3 nucleotides long.\ngr1 \u0026lt;- GRanges(seqnames = \u0026quot;chr1\u0026quot;, strand = c(\u0026quot;+\u0026quot;, \u0026quot;-\u0026quot;, \u0026quot;+\u0026quot;), ranges = IRanges(start = c(1,3,5), width = 3)) gr1  ## GRanges object with 3 ranges and 0 metadata columns: ## seqnames ranges strand ## \u0026lt;Rle\u0026gt; \u0026lt;IRanges\u0026gt; \u0026lt;Rle\u0026gt; ## [1] chr1 1-3 + ## [2] chr1 3-5 - ## [3] chr1 5-7 + ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths  To create a GRange for a single chromosome.\nchrI \u0026lt;- GRanges(seqnames = \u0026quot;chrI\u0026quot;, ranges = IRanges(start = 1, width = 3000000)) chrI  ## GRanges object with 1 range and 0 metadata columns: ## seqnames ranges strand ## \u0026lt;Rle\u0026gt; \u0026lt;IRanges\u0026gt; \u0026lt;Rle\u0026gt; ## [1] chrI 1-3000000 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths  To create a GRange with ChIP-seq peaks, all on the same chromosome you could assign the start and end co-ordinates to vectors and create a GRange from that.\npeak_start \u0026lt;- c(100,220,450,767,899,1040) peak_end \u0026lt;- c(140,260,490,800,945,1100) peaks_gr \u0026lt;- GRanges(seqnames = \u0026quot;chrI\u0026quot;, ranges = IRanges(start=peak_start, end=peak_end)) peaks_gr  ## GRanges object with 6 ranges and 0 metadata columns: ## seqnames ranges strand ## \u0026lt;Rle\u0026gt; \u0026lt;IRanges\u0026gt; \u0026lt;Rle\u0026gt; ## [1] chrI 100-140 * ## [2] chrI 220-260 * ## [3] chrI 450-490 * ## [4] chrI 767-800 * ## [5] chrI 899-945 * ## [6] chrI 1040-1100 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths  GRanges from dataframes It is more likely that you will want to create GRanges objects from other data structures. For example, if you import peaks from a BED file. Bioconductor packages provide import functions for different filetypes and then this can be coerced into a dataframe and easily converted into a GRanges object with the makeGRangesFromDataFrame function.\n","date":1555804800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555804800,"objectID":"1ac3e69106f31f470c2648f9f0742f92","permalink":"https://tomguest.netlify.com/tutorial/bioconductor_intro/","publishdate":"2019-04-21T00:00:00Z","relpermalink":"/tutorial/bioconductor_intro/","section":"tutorial","summary":"Introduction In this tutorial you will learn how to install and use bioconductor.\nBioconductor is an opensource collection of R packages that provides a framework for doing bioinformatics in R.","tags":null,"title":"Getting started with Bioconductor","type":"docs"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use the QuasR package to align our sequencing data to a reference genome.\nQuasR uses the alignment program Bowtie, and will produce bam files for each alignment. There are more advanced options for including auxiliary genomes (which are used to align \u0026lsquo;leftover\u0026rsquo; unmapped sequences) which are useful to check for contaminating DNA and for spiked experiments.\nSequencing reads In ChIP-seq the sequencing reads are typically short single end dsDNA. This means that the 5’ end will be sequenced on “+” strand and the 3’ end will be on “-” strand. \u0026ldquo;+” reads extend only in positive direction and “-” reads in negative direction which results in the typical bimodal peak at transcription factor binding sites.\n   Install the QuasR package if (!requireNamespace(\u0026quot;BiocManager\u0026quot;, quietly = TRUE)) install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(\u0026quot;QuasR\u0026quot;, version = \u0026quot;3.8\u0026quot;)  Folder structure I recommend having a folder for each new project. Within this create separate folders for raw_fastq, alignments, genomes, etc. You can then keep things tidy and avoid making any changes or accidentally deleting your raw fastq sequencing data.\nYou should set the project root as working directory, (or even better create a RStudio project).\nsetwd(\u0026quot;path/to/myChIPseqProject\u0026quot;)  Preparation Download and save the genome fasta file(s) to your genomes folder. Then direct R to their location(s).\nchromosomeI \u0026lt;- \u0026quot;genomes/chromosome_I.fasta\u0026quot; chromosomeII \u0026lt;- \u0026quot;genomes/chromosome_II.fasta\u0026quot;  You will also need to create a tabulated sampleFile.txt which should contain two columns FileName and SampleName, list the names of the files (exactly as they are) and a name for each sample.\nIf you multiple replicates you can either name them as replicate_** or if you give them all the same SampleName, R will know to treat them as replicates, but you will need to decide if that is how you want R to behave. If you are unsure stick with the former approach.\n   FileName SampleName     sample1.fastq sample1   sample2.fastq sample2    Then assign this to sampleFile in R:\nsampleFile \u0026lt;- \u0026quot;raw_fastq/sampleFile.txt\u0026quot;  Making the alignment(s) If you have multiple chromosomes you can assign the alignment to each as a separate QuasR project.\nNote: You could choose to align using a BSgenome object instead, see the QuasR documentation if you prefer to do that.\nBefore you run the qAlign() function, make sure that you have created the folders to store your alignments (or you will get an error saying the directory does not exist).\nTo see a full list of other alignment parameters, use ?qAlign to see the helpfile.\nproj_chrI \u0026lt;- qAlign(sampleFile, genome=chromosomeI, projectName = \u0026quot;chrI\u0026quot;, alignmentsDir= \u0026quot;alignments/chrI/\u0026quot;) proj_chrII \u0026lt;- qAlign(sampleFile, genome=chromosomeII, projectName = \u0026quot;chrII\u0026quot;, alignmentsDir= \u0026quot;alignments/chrII/\u0026quot;)  If you run the same code again and you already have the output .bam and .txt files it will not repeat the alignment. If you alter any alignment parameters it will do a new alignment.\nYou can type the project name into the console to see which output files correspond to each alignment.\nproj_chrI proj_chrII  Auxiliary alignments You can specify auxiliary genomes to be used to align unmapped sequences from the core genome. For example, if you have a spiked experiment or to check for contaminating sequences.\nTo do this supply a text file with a list of additional genome files like this:\n   FileName AuxName     NC_001422.1.fa phiX174    Then assign it in R:\nadditionalGenomes \u0026lt;- \u0026quot;genomes/additionalGenomes.txt\u0026quot;  And then when running qAlign, add auxiliaryFile = additionalGenomes to the arguments list.\nproj_chrI \u0026lt;- qAlign(sampleFile, genome=chromosomeI, projectName = \u0026quot;chrI\u0026quot;, alignmentsDir= \u0026quot;alignments/chrI/\u0026quot;, auxiliaryFile = additionalGenomes)  Alignment stats and quality reports You can use the alignmentStats() function to find out the number of mapped/unmapped reads.\nalignmentStats(proj_chrI) alignmentStats(proj_chrII)  You can produce PDF quality reports for each alignment using the qQCReport() function.\nqQCReport(proj_chrI, pdfFilename = \u0026quot;quality_reports/chrI_quality.pdf\u0026quot;) qQCReport(proj_chrII, pdfFilename = \u0026quot;quality_reports/chrII_quality.pdf\u0026quot;)  ","date":1555632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555632000,"objectID":"2539485f2d741d80539075b7cc345db0","permalink":"https://tomguest.netlify.com/tutorial/alignment/","publishdate":"2019-04-19T00:00:00Z","relpermalink":"/tutorial/alignment/","section":"tutorial","summary":"Introduction In this tutorial we will use the QuasR package to align our sequencing data to a reference genome.\nQuasR uses the alignment program Bowtie, and will produce bam files for each alignment.","tags":null,"title":"Aligning to a reference genome","type":"docs"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use the normalise read counts.\nTo do this you will need to import the BAM files from your alignments and use the mapping statistics and the average read length from the sequencing run.\n","date":1555632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555632000,"objectID":"0053820c2dd9a822b8e1ff4adc838e1e","permalink":"https://tomguest.netlify.com/tutorial/normalisation/","publishdate":"2019-04-19T00:00:00Z","relpermalink":"/tutorial/normalisation/","section":"tutorial","summary":"Introduction In this tutorial we will use the normalise read counts.\nTo do this you will need to import the BAM files from your alignments and use the mapping statistics and the average read length from the sequencing run.","tags":null,"title":"Normalising read counts","type":"docs"},{"authors":["Tom Guest"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://tomguest.netlify.com/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":null,"categories":null,"content":"Introduction In this tutorial we will use the BSgenome package to create an R package that contains the genome for Vibrio cholerae, but you can replace it with your favourite organism.\nThe BSgenome package provides a framework for interacting with genome information in R.\nAlert: There may already be a BSgenome package for your favourite organism. Check the list of available genomes first.\nOnce you have forged (created) and installed the package, you will be able to load the genome as you would any other R package, like this:\nlibrary(BSgenome.Vcholerae.NCBI.N16961)  If V. cholerae happens to be your favourite organism too, and want to save yourself some time, you can download the package I created, and skip to the \u0026lsquo;Install your genome package\u0026rsquo; section to get started.\nInstall the BSgenome package if (!requireNamespace(\u0026quot;BiocManager\u0026quot;, quietly = TRUE)) install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(\u0026quot;BSgenome\u0026quot;, version = \u0026quot;3.8\u0026quot;)  Download the genome sequence You will need to download the fasta files for the genome you want to forge. Since V. cholerae has two chromosomes, these are downloaded separately. You can use whatever source you like (EMBO, NCBI etc..) but make sure you get it in fasta file type.\nFor the V.cholerae reference genome (N16961):\n chromosome I chromesome II  At the NCBI website, click send to file, then select FASTA.\nPrepare your files I created a new folder on my Desktop and set this as my working directory:\nsetwd(\u0026quot;~/Desktop/genomepackage\u0026quot;)  Within this create another named seqs_srcdir, move the fasta files here.\nMake sure the files are appropriately named (i.e.. as-is from source) for V. cholerae the two chromosome fasta files are named: NC_002505.1.fa and NC_002506.1.fa. It is tempting to name them something more readable like \u0026ldquo;chromosome 1\u0026rdquo; but this can cause problems later.\nEnsure the file extensions are .fa if they are not already, on Mac double check by right-clicking and choosing \u0026lsquo;Get Info\u0026rsquo; because it could still be .fasta - if so, amend it.\nSeed file The seed file contains all the relevant metadata for the BSgenome package, so it is worth supplying as much information as you can. The easiest way to make a seed file is to edit one that already exists, so you can download my seed file and use it as a template.\nYou will need to use a text editor such as TextEdit on Mac (right-click and select open with \u0026gt; TextEdit) or RStudio. Use NCBI to populate the relevant information:\n Package: BSgenome.Vcholerae.NCBI.N16961\nTitle: Full genome sequence for Vibrio cholerae O1 biovar El Tor str N16961\nDescription: Full genome sequence for the two chromosomes of Vibrio cholerae El Tor N16961 provided by NCBI\nVersion: 1.0.0\norganism: Vibrio cholerae\ncommon_name: V. cholerae\nprovider: NCBI\nprovider_version: ASM674v1\nrelease_date: 2014/02\nrelease_name: N16961\nsource_url: https://www.ncbi.nlm.nih.gov/genome/?term=Vibrio%20cholerae\norganism_biocview: Vibrio_cholerae\nBSgenomeObjname: Vcholerae\nseqnames: c(\u0026ldquo;NC_002505.1\u0026rdquo;,\u0026ldquo;NC_002506.1\u0026rdquo;)\nseqs_srcdir: /User/Desktop/genomepackage/seqs_srcdir\n For genomes with multiple chromosomes, list them as a vector (see above example). Otherwise seqnames: chromosomenameFileName is sufficient (you can remove the c()).\nThe BSgenomeObjname is important because this is the name you will use to access the package in R once it has been installed.\nSave it as is, and then edit the file name. Be careful with the file extensions, double check using \u0026lsquo;Get Info\u0026rsquo; to ensure it has not been changed to .txt or anything else.\nForge the package The package is forged using the forgeBSgenomeDataPkg function.\nSimply use the name of the seed file as the only argument and it will create your package files to the same directory.\nAlert:\nDouble check the sequence files are .fa file types and that the details in the seed are correct before running.\nforgeBSgenomeDataPkg(\u0026quot;BSgenome.Vcholerae.NCBI.N16961-seed\u0026quot;)  If you need to run the function again, delete the previous package files first.\nInstall your genome package To install the genome package you will need to use the Mac command line (Terminal).\n Close R Open Terminal In Terminal navigate to your working directory:  use ls to see list of files in the current directory use cd to move to a directory (i.e.. cd Desktop)   Run R CMD build BSgenome.Vcholerae.EBI.N16961 to compile the package Run R CMD check BSgenome.Vcholerae.EBI.N16961.tar.gz to check it Run R CMD INSTALL BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz  Alert:\nIf you have downloaded my V. cholerae N16961 package you will need to navigate to wherever you have saved the file. Then run:\nR CMD INSTALL BSgenome.Vcholerae.NCBI.N16961_1.0.0.tar.gz\nAnd you\u0026rsquo;re done! It should now be ready to use.\nLoading and accessing the genome in R To use the genome in R you will need to load the package using the library() function.\nlibrary(BSgenome.Vcholerae.NCBI.N16961)  Enter the BSgenomeObjname (in this case Vcholerae) to print some general information about the genome to the console.\nVcholerae  ## V. cholerae genome: ## # organism: Vibrio cholerae (V. cholerae) ## # genome: ASM674v1 ## # provider: NCBI ## # release date: 2014/02 ## # 2 sequences: ## # NC_002505.1 NC_002506.1 ## # (use 'seqnames()' to see all the sequence names, use the '$' or '[[' operator ## # to access a given sequence)  length() tells you how many chromosomes there are\nlength(Vcholerae)  ## [1] 2  Vcholerae$NC_002505.1 tells you the length of chromosome I and a bit of its sequence\nVcholerae$NC_002505.1  ## 2961149-letter DNAString object ## seq: AGGGTCATTAAATATATATAAAGATCTATATAGAGA...GGCTAGAAAATCGCTTTCCTGTTTTTTCGATCAAGG  alphabetFrequency(Vcholerae$NC_002505.1) shows you the ACGT content of chromosome I\nalphabetFrequency(Vcholerae$NC_002505.1)  ## A C G T M R W S Y K V ## 769234 703384 708931 779567 0 0 0 0 0 0 0 ## H D B N - + . ## 0 0 0 33 0 0 0  You can extract sequence from specific co-ordinates, for example to select the sequence from position 45 to 65 on chromosome I:\nVcholerae$NC_002505.1[45:65]  ## 21-letter DNAString object ## seq: TTAGATCTACTATTAAGGAGC  You could then store this in a data frame, export the data frame as fasta file (with multiple sequence etc..) and use it somewhere else\u0026hellip;\n","date":1536451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536451200,"objectID":"bd692af138216f5df18b57a61dea5717","permalink":"https://tomguest.netlify.com/tutorial/bsgenome/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/tutorial/bsgenome/","section":"tutorial","summary":"Introduction In this tutorial we will use the BSgenome package to create an R package that contains the genome for Vibrio cholerae, but you can replace it with your favourite organism.","tags":null,"title":"Forging a BSgenome package","type":"docs"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://tomguest.netlify.com/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://tomguest.netlify.com/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Tom Guest","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://tomguest.netlify.com/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Tom Guest","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://tomguest.netlify.com/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://tomguest.netlify.com/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"General  R Studio Add-ins list Shiny tutorials updateR Package for updating R within R studio (website includes install and usage instructions). Icons for diagrams Migrating from Excel Data viz  Learning R  Swirl Learn basic R within R. Rockefeller University Lots of stuff for learning to use R for bioninformatics, ChIPseq, RNAseq etc.. sequence motifs good introduction to DNA sequence motifs  Plotting  ggplot extensions gglabeller Shiny app for easily adding labels to ggplots. You can click on individual points or select multiple at once. ggThemeAssist Add-in for R Studio that allows you to alter graphical parameters of a ggplot within a nicer GUI and outputs the R code for producing the plot. ggedit Shiny app for building ggplots, looks more powerful than theme assist. heatmaps rvg Package for exporting plots into powerpoint for final aesthetic edits  Writing  remedy Keyboard shortcuts for RStudio that help you to write more efficiently. Such as Cmd-Ctrl+B for bold fontface. citr R Studio add-in that allows you to cite within text written in R. It uses a bibliography file referenced in the document YAML, or can work directly with Zotero library. Zotero style library Use to download csl files for citation styles in Rmarkdown insertimage R Studio add-in to streamline adding images to markdown documents. Note: the copying files behaviour. Tips for images in R markdown Helpful post about managing images in R markdown documents and editing size etc. formatting tables using huxtable Package that allows you to easily make nice tables using R dataframes in rmarkdown output latex faq  Bio  gg genes ggplot extension for making gene figures.  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"35c0c967996765029ebd71dc5769a6bf","permalink":"https://tomguest.netlify.com/internet-resources/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/internet-resources/","section":"","summary":"Online resources for R that I have found useful","tags":null,"title":"Online R Resources","type":"page"}]